import React, { useState, useEffect } from "react";
import db from "./database";
import jsPDF from "jspdf";
import autoTable from "jspdf-autotable";

const PatientManager = () => {
  const [patients, setPatients] = useState([]);
  const [editingId, setEditingId] = useState(null);
  const [formData, setFormData] = useState({
    name: "",
    dob: "",
    age: "",
    gender: "",
    citizenship: "",
    address: "",
    mobile: "",
    bloodGroup: "",
    fbs: "",
    sgpt: "",
    sgot: "",
    cholesterol: "",
    tg: "",
    creatinine: "",
    uricAcid: "",
    breathometer: "",
    ecg: "",
  });
  const [search, setSearch] = useState({
    name: "",
    dob: "",
    citizenship: "",
    mobile: "",
  });

  useEffect(() => {
    const fetchPatients = async () => {
      setPatients(await db.patients.toArray());
    };
    fetchPatients();
  }, []);

  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const exportToPDF = async (patient) => {
    const doc = new jsPDF();
    doc.setFontSize(18);
    doc.text("Patient Details", 14, 15);

    const fieldsToInclude = Object.keys(patient).filter((key) => key !== "id");
    const headers = ["Field", "Value"];

    const data = fieldsToInclude.map((key) => {
      return [key.charAt(0).toUpperCase() + key.slice(1), patient[key]];
    });

    autoTable(doc, {
      startY: 25,
      head: [headers],
      body: data,
      styles: { fontSize: 12 },
      theme: "grid",
      didParseCell: (data) => {
        if (data.column.index === 1) {
          const fieldName = data.row.raw[0].toLowerCase();
          const value = parseFloat(data.row.raw[1]);

          if (!isNaN(value)) {
            let fillColor = null;
            let textColor = [0, 0, 0];

            if (fieldName === "tg") {
              if (value <= 150) {
                fillColor = [0, 128, 0];
                textColor = [255, 255, 255]; // Green
              } else if (value <= 199) {
                fillColor = [255, 255, 0]; // Yellow
                textColor = [0, 0, 0];
              } else {
                fillColor = [255, 0, 0];
                textColor = [255, 255, 255]; // Red
              }
            } else if (fieldName === "cholesterol") {
              if (value <= 200) {
                fillColor = [0, 128, 0];
                textColor = [255, 255, 255]; // Green
              } else if (value <= 239) {
                fillColor = [255, 255, 0];
                textColor = [0, 0, 0]; // Yellow
              } else {
                fillColor = [255, 0, 0];
                textColor = [255, 255, 255]; // Red
              }
            } else if (testRanges[fieldName]) {
              const { min, max } = testRanges[fieldName];
              if (value < min || value > max) {
                fillColor = [255, 0, 0]; // Red
                textColor = [255, 255, 255];
              } else {
                fillColor = [0, 128, 0]; // Green
                textColor = [255, 255, 255];
              }
            }

            if (fillColor) {
              data.cell.styles.fillColor = fillColor;
              data.cell.styles.textColor = textColor;
            }
          }
        }
      },
    });

    doc.setFontSize(10);
    doc.setTextColor(150);
    doc.text(
      "Generated by Hospital Management System",
      14,
      doc.internal.pageSize.height - 10
    );
    doc.line(
      10,
      doc.internal.pageSize.height - 15,
      200,
      doc.internal.pageSize.height - 15
    );

    doc.save(`${patient.name}_details.pdf`);
  };

  const addOrUpdatePatient = async () => {
    if (Object.values(formData).some((field) => !field))
      return alert("Please fill all fields!");

    if (editingId) {
      await db.patients.update(editingId, formData);
      setEditingId(null);
    } else {
      await db.patients.add(formData);
    }

    setPatients(await db.patients.toArray());
    setFormData({
      name: "",
      dob: "",
      age: "",
      gender: "",
      citizenship: "",
      address: "",
      mobile: "",
      bloodGroup: "",
      fbs: "",
      sgpt: "",
      sgot: "",
      cholesterol: "",
      tg: "",
      creatinine: "",
      uricAcid: "",
      breathometer: "",
      ecg: "",
    });
  };

  const exportData = async () => {
    const patients = await db.patients.toArray();
    const blob = new Blob([JSON.stringify(patients, null, 2)], {
      type: "application/json",
    });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = "patients_backup.json";
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
  };

  const importData = async (event) => {
    const file = event.target.files[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = async (e) => {
      const data = JSON.parse(e.target.result);
      // await db.patients.clear(); // Optional: Clear old data
      await db.patients.bulkAdd(data);
      alert("Data imported successfully!");
    };
    reader.readAsText(file);
  };

  const editPatient = (patient) => {
    setFormData(patient);
    setEditingId(patient.id);
  };

  const deletePatient = async (id) => {
    await db.patients.delete(id);
    setPatients(await db.patients.toArray());
  };

  const clearAllData = async () => {
    if (window.confirm("Are you sure you want to delete all records?")) {
      await db.patients.clear();
      setPatients([]);
    }
  };

  const filteredPatients = patients.filter(
    (p) =>
      p.name.toLowerCase().includes(search.name.toLowerCase()) &&
      p.dob.toLowerCase().includes(search.dob.toLowerCase()) &&
      p.citizenship.toLowerCase().includes(search.citizenship.toLowerCase()) &&
      p.mobile.toLowerCase().includes(search.mobile.toLowerCase())
  );

  const testRanges = {
    fbs: { min: 70, max: 100 },
    sgpt: { min: 0, max: 40 },
    sgot: { min: 0, max: 40 },
    cholesterol: { min: 200, max: 240 },
    tg: { min: 100, max: 200 },
    creatinine: { min: 0.7, max: 1.3 },
    uricAcid: { min: 2, max: 7 },
  };

  return (
    <div className="app-wrapper">
      <h1>Offline Patient Records</h1>
      <h3>{editingId ? "Edit Patient" : "Add Patient"}</h3>
      <div className="patient-inputs">
        {Object.keys(formData).map((key) => (
          <div key={key}>
            <label htmlFor={key}>
              {key.charAt(0).toUpperCase() + key.slice(1)}
            </label>
            <input
              value={formData[key]}
              onChange={handleChange}
              type="text"
              name={key}
              className={key}
              placeholder={`Enter ${
                key.charAt(0).toUpperCase() + key.slice(1)
              }`}
            />
          </div>
        ))}
      </div>
      <div className="input-btns">
        <button onClick={addOrUpdatePatient}>
          {editingId ? "Update" : "Add"} Patient
        </button>

        <button onClick={clearAllData} className="clear">
          Clear All Data
        </button>
      </div>
      <div className="patient-list-header">
        <h3>Patient List</h3>
        <div className="patient-list-header">
          <h3>Patient List</h3>
          <input
            value={search.name}
            onChange={(e) => setSearch({ ...search, name: e.target.value })}
            placeholder="Search by Name"
          />
          <input
            value={search.dob}
            onChange={(e) => setSearch({ ...search, dob: e.target.value })}
            placeholder="Search by DOB"
          />
          <input
            value={search.citizenship}
            onChange={(e) =>
              setSearch({ ...search, citizenship: e.target.value })
            }
            placeholder="Search by Citizenship"
          />
          <input
            value={search.mobile}
            onChange={(e) => setSearch({ ...search, mobile: e.target.value })}
            placeholder="Search by Mobile"
          />
        </div>
      </div>
      <table>
        <thead>
          <tr>
            {Object.keys(formData).map((key) => (
              <th key={key}>{key}</th>
            ))}
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          {filteredPatients.map((p) => (
            <tr key={p.id}>
              {Object.keys(formData).map((key) => (
                <td
                  key={key}
                  style={{
                    ...(testRanges[key] &&
                      (() => {
                        const value = parseFloat(p[key]);
                        if (isNaN(value)) return {};

                        if (key === "tg") {
                          if (value <= 150) {
                            return { backgroundColor: "green", color: "white" };
                          } else if (value <= 199) {
                            return {
                              backgroundColor: "yellow",
                              color: "black",
                            };
                          } else {
                            return { backgroundColor: "red", color: "white" };
                          }
                        } else if (key === "cholesterol") {
                          if (value <= 200) {
                            return { backgroundColor: "green", color: "white" };
                          } else if (value <= 239) {
                            return {
                              backgroundColor: "yellow",
                              color: "black",
                            };
                          } else {
                            return { backgroundColor: "red", color: "white" };
                          }
                        } else {
                          const { min, max } = testRanges[key];
                          if (value < min || value > max) {
                            return { backgroundColor: "red", color: "white" };
                          }
                          return { backgroundColor: "green", color: "white" };
                        }
                      })()),
                  }}
                >
                  {p[key]}
                </td>
              ))}
              <td>
                <button onClick={() => editPatient(p)}>Edit</button>
                <button onClick={() => deletePatient(p.id)} className="delete">
                  Delete
                </button>
                <button onClick={() => exportToPDF(p)} className="export">
                  Export PDF
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
      <button onClick={exportData} className="export">
        Export Data
      </button>{" "}
      <br />
      <input type="file" onChange={importData} className="import" />
    </div>
  );
};

export default PatientManager;
